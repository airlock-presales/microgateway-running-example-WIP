controller:
  type: deployment
  replicas: 1

alloy:
  configMap:
    create: true
    content: |
      // Discover all pods cluster-wide
      discovery.kubernetes "pod" {
        role = "pod"
      }

      discovery.relabel "airlock_sidecars" {
        targets = discovery.kubernetes.pod.targets

        // Keep only Airlock sidecar containers
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          regex         = "airlock-microgateway-engine|airlock-microgateway-session-agent"
          action        = "keep"
        }

        // Useful labels
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
          action        = "replace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
          action        = "replace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          target_label  = "container"
          action        = "replace"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          target_label  = "app"
          action        = "replace"
        }
        // Optional: capture engine version label
        rule {
          source_labels = ["__meta_kubernetes_pod_label_sidecar_microgateway_airlock_com_engineVersion"]
          target_label  = "engine_version"
          action        = "replace"
        }

        // Static service label to simplify queries
        rule {
          target_label = "service"
          replacement  = "airlock-microgateway"
          action       = "replace"
        }
      }

      // Tail via Kubernetes API (no hostPath mounts)
      loki.source.kubernetes "sidecars" {
        targets    = discovery.relabel.airlock_sidecars.output
        forward_to = [loki.process.airlock.receiver]
      }

      // Optional pipelines (add filters/parsers here)
      loki.process "airlock" {
        // Example: drop noisy lines
        // stage.drop {
        //   expression = "unknown-service"
        // }
        stage.static_labels {
          values = { cluster = "my-cluster" }
        }
        forward_to = [loki.write.default.receiver]
      }

      // Push to Loki
      loki.write "default" {
        endpoint {
          url       = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
          tenant_id = "fake"
        }
      }

#resources:
#  requests:
#    cpu: 100m
#    memory: 128Mi
#  limits:
#    cpu: 200m
#    memory: 256Mi
